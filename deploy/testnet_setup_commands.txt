 gcloud projects list
 gcloud config set project push-chain-testnet

# 1. Reserve static external IPs for donut-node1 and donut-node2
gcloud compute addresses create push-chain-testnet-donut-node1-ip --region=us-central1
gcloud compute addresses create push-chain-testnet-donut-node2-ip --region=us-central1

# 2. Create the donut-node1 (no SSH metadata here)
gcloud compute instances create push-chain-testnet-donut-node1 \
  --zone=us-central1-a \
  --machine-type=custom-4-10496 \
  --image-family=ubuntu-2204-lts \
  --image-project=ubuntu-os-cloud \
  --boot-disk-size=200GB \
  --boot-disk-type=pd-ssd \
  --network=cosmos-network \
  --subnet=cosmos-network \
  --address=push-chain-testnet-donut-node1-ip \
  --tags=cosmos-p2p,http-server,https-server \
  --maintenance-policy=MIGRATE \
  --shielded-vtpm \
  --shielded-integrity-monitoring \
  --service-account=764067207434-compute@developer.gserviceaccount.com \
  --scopes=\
https://www.googleapis.com/auth/devstorage.read_only,\
https://www.googleapis.com/auth/logging.write,\
https://www.googleapis.com/auth/monitoring.write,\
https://www.googleapis.com/auth/pubsub,\
https://www.googleapis.com/auth/service.management.readonly,\
https://www.googleapis.com/auth/servicecontrol,\
https://www.googleapis.com/auth/trace.append

# 3. Create the donut-node2 (no SSH metadata here)
gcloud compute instances create push-chain-testnet-donut-node2 \
  --zone=us-central1-a \
  --machine-type=custom-4-10496 \
  --image-family=ubuntu-2204-lts \
  --image-project=ubuntu-os-cloud \
  --boot-disk-size=200GB \
  --boot-disk-type=pd-ssd \
  --network=cosmos-network \
  --subnet=cosmos-network \
  --address=push-chain-testnet-donut-node2-ip \
  --tags=cosmos-p2p,http-server,https-server \
  --maintenance-policy=MIGRATE \
  --shielded-vtpm \
  --shielded-integrity-monitoring \
  --service-account=764067207434-compute@developer.gserviceaccount.com \
  --scopes=\
https://www.googleapis.com/auth/devstorage.read_only,\
https://www.googleapis.com/auth/logging.write,\
https://www.googleapis.com/auth/monitoring.write,\
https://www.googleapis.com/auth/pubsub,\
https://www.googleapis.com/auth/service.management.readonly,\
https://www.googleapis.com/auth/servicecontrol,\
https://www.googleapis.com/auth/trace.append

gcloud compute instances add-metadata push-chain-testnet-donut-node1 \
  --zone=us-central1-a \
  --metadata=ssh-keys="shoaibmohammed:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCksx/mCH7xZH3EIq6QpNgBLRehq2XISdTvhXDYuHvz3C7LgUn05mFvx04HyyU9S7il0MBbmwEX1r4IsHxwdQ85Lbnxz725XO1q7TR1P0+3nH54CCz3QUpMSfaFeR6IvQDnLiQAg5x1AkCPIYH2G+3nce4frnNog2sBuqSTtSfwgegQCkPP0+b1PIugJD1GjmCIMfMB/KUs5yVXaZo6eqbguNgf/4CycTrbjwtKELDMf8N5+A8JtVn21O1uKCiVWlR9Wl7aknzN74wfhk0CxMp4345ua75I6AEunpXiOOR5tA/sxYkR5JfgQtsIqsXC+02B2ATT9UgRCmOXSL6sEpFH shoaibmohammed@Shoaibs-MacBook-Pro.local"


gcloud compute instances add-metadata push-chain-testnet-donut-node2 \
  --zone=us-central1-a \
  --metadata=ssh-keys="shoaibmohammed:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCksx/mCH7xZH3EIq6QpNgBLRehq2XISdTvhXDYuHvz3C7LgUn05mFvx04HyyU9S7il0MBbmwEX1r4IsHxwdQ85Lbnxz725XO1q7TR1P0+3nH54CCz3QUpMSfaFeR6IvQDnLiQAg5x1AkCPIYH2G+3nce4frnNog2sBuqSTtSfwgegQCkPP0+b1PIugJD1GjmCIMfMB/KUs5yVXaZo6eqbguNgf/4CycTrbjwtKELDMf8N5+A8JtVn21O1uKCiVWlR9Wl7aknzN74wfhk0CxMp4345ua75I6AEunpXiOOR5tA/sxYkR5JfgQtsIqsXC+02B2ATT9UgRCmOXSL6sEpFH shoaibmohammed@Shoaibs-MacBook-Pro.local"




V-1 node



nc -l 26656
telnet $REMOTE_HOST 26656

⏺ Cosmos Node Network Configuration Summary

  Nodes Configured

  - push-chain-testnet-donut-node1
    - Internal IP: 10.128.0.4
    - External IP: 34.57.209.0
    - Tags: cosmos-p2p, http-server, https-server
  - push-chain-testnet-donut-node2
    - Internal IP: 10.128.0.3
    - External IP: 34.123.139.31
    - Tags: cosmos-p2p, http-server, https-server

  Firewall Rules Created

  1. cosmos-p2p-allow - TCP port 26656 (P2P communication)
  2. allow-cosmos-p2p-26657 - TCP port 26657 (RPC)
  3. allow-cosmos-p2p-8545 - TCP port 8545 (EVM RPC)

  All rules:
  - Allow traffic from 0.0.0.0/0 (any source)
  - Target instances with tag: cosmos-p2p

  Configuration Steps Performed

  1. Created firewall rules matching push-dev-apps project setup
  2. Verified nodes have correct network tags (cosmos-p2p, http-server, https-server)
  3. Enabled communication between nodes on required Cosmos ports

  Testing Connectivity

# Update package list
sudo apt-get update

# Install required packages
sudo apt-get install -y \
    build-essential \
    git \
    golang-go \
    jq \
    python3 \
    python3-pip \
    curl \
    wget \
    netcat

# Install Python dependencies
pip3 install tomlkit

# Verify Python version (should be 3.10+)
python3 --version


sudo rm -rf app  snap .pchain .pchaind
mkdir ~/app
mkdir ~/.pchaind

echo 'export PATH="$HOME/app:$PATH"' >> ~/.bashrc
source ~/.bashrc



Deploy to DONUT-NODE1 (Genesis Node)



scp "build/pchaind" "34.57.209.0:~/app/pchaind"
scp "deploy/make_first_node.sh" "34.57.209.0:~/app/make_first_node.sh"
scp -r deploy/test-push-chain/scripts/* "34.57.209.0:~/app/"

scp \
  build/pchaind \
  deploy/make_first_node.sh \
  deploy/test-push-chain/scripts/* \
  34.57.209.0:~/app/


SSH to DONUT-NODE1

chmod +x ~/app/pchaind
chmod u+x ~/app/*.sh
sudo rm /usr/local/bin/pchaind
sudo ln -s ~/app/pchaind /usr/local/bin/pchaind
sudo sed -i 's/external_address = ""/external_address = "34.57.209.0:26656"/' /home/shoaibmohammed/.pchain/config/config.toml
~/app/make_first_node.sh
~/app/start.sh
~/app/showLogs.sh

rm ~/app/make_first_node.sh

DONUT-NODE2 (Validator Node)
rm -rf app  snap .pchain .pchaind
mkdir ~/app
mkdir ~/.pchaind
echo 'export PATH="$HOME/app:$PATH"' >> ~/.bashrc
source ~/.bashrc


# Update package list
sudo apt-get update

# Install required packages
sudo apt-get install -y \
    build-essential \
    git \
    golang-go \
    jq \
    python3 \
    python3-pip \
    curl \
    wget \
    netcat

# Install Python dependencies
pip3 install tomlkit

# Verify Python version (should be 3.10+)
python3 --version



Deploy to DONUT-NODE2 (Validator Node)


scp "build/pchaind" "34.123.139.31:~/app/pchaind"
scp -r deploy/test-push-chain/scripts/* "34.123.139.31:~/app/"
scp -r deploy/test-push-chain/config/* "34.123.139.31:~/app/config-tmp/"
scp "deploy/test-push-chain/scripts/toml_edit.py" "34.123.139.31:~/app/toml_edit.py"

SSH to DONUT-NODE2 

chmod u+x ~/app/pchaind
chmod u+x ~/app/*.sh
sudo rm /usr/local/bin/pchain && \
sudo ln -s ~/app/pchaind /usr/local/bin/pchain




~/app/resetConfigs.sh
python3 ~/app/toml_edit.py \
  ~/.pchain/config/config.toml \
  "moniker" \
  "donut-node2"



# note : execute this cmd on the remote node to get it's id : pchaind tendermint show-node-id 
export pn1_url="021660c91763de249eca6b57ba423f10b2b89cec@34.57.209.0:26656"

#Step 1: Copy from node 1 to local:
scp "34.57.209.0:~/.pchain/config/genesis.json" "./genesis.json"

# Step 2: Copy from local to node 2:
scp "./genesis.json" "34.123.139.31:~/.pchain/config/genesis.json"


export HOME_DIR="~/.pchain"
export CHAIN_DIR="$HOME/.pchain"

python3 ~/app/toml_edit.py \
  ~/.pchain/config/config.toml \
  "p2p.persistent_peers" \
  "$pn1_url"



echo '{"height":"0","round":0,"step":0}' > ~/.pchain/data/priv_validator_state.json

chmod 600 ~/.pchain/config/priv_validator_key.json 2>/dev/null || true


~/app/stop.sh
~/app/start.sh
tail -n 100 ~/app/chain.log
~/app/waitFullSync.sh



pchaind tendermint show-node-id
ab75b1d4942c2275b1128814ff7bd3187917ea84

export VALIDATOR_PUBKEY=$(pchaind comet show-validator)
export ONE_PUSH=000000000000000000upc
export VALIDATOR_NAME=\"donut-node2\"
cat <<EOF > register-validator.json
{
	"pubkey": $VALIDATOR_PUBKEY,
	"amount": "20000$ONE_PUSH",
	"moniker": $VALIDATOR_NAME,
	"website": "push.org",
	"security": "shoaib@push.org",
	"details": "a test validator",
	"commission-rate": "0.1",
	"commission-max-rate": "0.2",
	"commission-max-change-rate": "0.01",
	"min-self-delegation": "1"
}
EOF
echo "validator name: $VALIDATOR_NAME, pubkey is $VALIDATOR_PUBKEY"
echo "json cmd is "


cat register-validator.json



shoaibmohammed@push-chain-testnet-val-02:~/.pchain$ 
export KEYRING="test"
export NODE_OWNER_WALLET_NAME=acc21

export FAUCET_WALLET=push1ly2z32h2t4ap2zd3etmwqjlyg9esf2hwrrj50p
export NODE_OWNER_WALLET=push108x4hu24qdux00zncr4we409s8v3x0lgxt66gd
export ONE_PUSH=000000000000000000upc
export CHAIN_ID="push_42101-1"


TO BE RUN on V1

shoaibmohammed@push-chain-testnet-val-01:~$ 
export KEYRING="test"
export FAUCET_WALLET="push1ly2z32h2t4ap2zd3etmwqjlyg9esf2hwrrj50p"
export NODE_OWNER_WALLET="push12exvrdv7lk3junydgyss3nxgvuytyzc293694d"
export ONE_PUSH="000000000000000000upc"
export CHAIN_ID="push_42101-1"

shoaibmohammed@push-chain-testnet-val-01:~$ pchaind tx bank send "$FAUCET_WALLET" "$NODE_OWNER_WALLET" "25000$ONE_PUSH" --fees 1000000000000000upc --chain-id "$CHAIN_ID" --keyring-backend "$KEYRING" --yes
code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: ""
timestamp: ""
tx: null
txhash: 5B18F5619897BCCA991A21743CADDFC2CE142B44889D96D445BB84A30F8DC067


pchaind query tx 5B18F5619897BCCA991A21743CADDFC2CE142B44889D96D445BB84A30F8DC067 --chain-id $CHAIN_ID --output json | jq '{code, raw_log}'

shoaibmohammed@push-chain-testnet-val-02:~/app$ export NODE_OWNER_WALLET_NAME="acc21"
export CHAIN_ID="push_42101-1"
export ONE_PUSH="000000000000000000upc"

pchaind tx staking create-validator register-validator.json \
  --chain-id $CHAIN_ID \
  --fees "1$ONE_PUSH" \
  --gas "1000000" \
  --from $NODE_OWNER_WALLET_NAME \
  --node=tcp://34.57.209.0:26657 \
  --keyring-backend test \
  --yes


code: 0
codespace: ""
data: ""
events: []
gas_used: "0"
gas_wanted: "0"
height: "0"
info: ""
logs: []
raw_log: ""
timestamp: ""
tx: null
txhash: 64DAFDD500AC40B885D0047B1E686A6E040B159F7E0C1007F9776B6246250768

pchaind query tx 64DAFDD500AC40B885D0047B1E686A6E040B159F7E0C1007F9776B6246250768 --chain-id $CHAIN_ID --output json | jq '{code, raw_log}'

pchaind query staking validators --output json | jq '.validators[] | select(.description.moniker=="donut-node1")'

sed -i 's/^enable = false/enable = true/' /home/shoaibmohammed/.pchain/config/app.toml && grep -A2 "\[json-rpc\]" /home/shoaibmohammed/.pchain/config/app.toml)