#!/bin/bash

# Push Node Manager for Mac Development
# This script provides the same interface as push-node-manager but runs natively on Mac

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
PCHAIND_BINARY="/tmp/pchaind-local"
PCHAIN_HOME="$HOME/.pchain-dev"
CHAIN_ID="push_42101-1"
MONIKER="mac-dev-node"
NETWORK="testnet"
NETWORKS_CONFIG="./configs/networks.json"

# Check if binary exists
check_binary() {
    if [[ ! -f "$PCHAIND_BINARY" ]]; then
        print_error "Binary not found at $PCHAIND_BINARY"
        print_status "Run './build-mac.sh' first to build the binary"
        exit 1
    fi
    
    if [[ ! -x "$PCHAIND_BINARY" ]]; then
        print_error "Binary is not executable"
        chmod +x "$PCHAIND_BINARY"
    fi
}

# Load network configuration
load_network_config() {
    if [[ ! -f "$NETWORKS_CONFIG" ]]; then
        print_error "Network configuration not found: $NETWORKS_CONFIG"
        exit 1
    fi
    
    # Extract network configuration using jq or python
    if command -v jq >/dev/null 2>&1; then
        RPC_ENDPOINT=$(jq -r ".networks.${NETWORK}.rpc_endpoints[0]" "$NETWORKS_CONFIG")
        PERSISTENT_PEERS=$(jq -r ".networks.${NETWORK}.persistent_peers | join(\",\")" "$NETWORKS_CONFIG")
        CHAIN_ID=$(jq -r ".networks.${NETWORK}.chain_id" "$NETWORKS_CONFIG")
        GAS_PRICES=$(jq -r ".networks.${NETWORK}.minimum_gas_prices" "$NETWORKS_CONFIG")
    elif command -v python3 >/dev/null 2>&1; then
        RPC_ENDPOINT=$(python3 -c "import json; data=json.load(open('$NETWORKS_CONFIG')); print(data['networks']['$NETWORK']['rpc_endpoints'][0])")
        PERSISTENT_PEERS=$(python3 -c "import json; data=json.load(open('$NETWORKS_CONFIG')); print(','.join(data['networks']['$NETWORK']['persistent_peers']))")
        CHAIN_ID=$(python3 -c "import json; data=json.load(open('$NETWORKS_CONFIG')); print(data['networks']['$NETWORK']['chain_id'])")
        GAS_PRICES=$(python3 -c "import json; data=json.load(open('$NETWORKS_CONFIG')); print(data['networks']['$NETWORK']['minimum_gas_prices'])")
    else
        print_error "jq or python3 required for configuration parsing"
        exit 1
    fi
    
    # Construct genesis URL from RPC endpoint
    GENESIS_URL="${RPC_ENDPOINT}/genesis"
}

# Initialize node
init_node() {
    print_status "🍎 Initializing Push Chain node for Mac development..."
    
    check_binary
    load_network_config
    
    print_status "Network: $NETWORK"
    print_status "Chain ID: $CHAIN_ID"
    print_status "Moniker: $MONIKER"
    print_status "Home: $PCHAIN_HOME"
    
    # Initialize node
    print_status "Initializing node configuration..."
    "$PCHAIND_BINARY" init "$MONIKER" --chain-id "$CHAIN_ID" --home "$PCHAIN_HOME"
    
    # Download genesis
    print_status "Downloading genesis file..."
    curl -s "$GENESIS_URL" > "$PCHAIN_HOME/config/genesis.json"
    
    # Configure persistent peers
    if [[ "$PERSISTENT_PEERS" != "null" && "$PERSISTENT_PEERS" != "" ]]; then
        print_status "Configuring persistent peers..."
        if command -v python3 >/dev/null 2>&1; then
            python3 -c "
import toml
try:
    with open('$PCHAIN_HOME/config/config.toml', 'r') as f:
        config = toml.load(f)
    config['p2p']['persistent_peers'] = '$PERSISTENT_PEERS'
    with open('$PCHAIN_HOME/config/config.toml', 'w') as f:
        toml.dump(config, f)
except ImportError:
    print('toml library not available, using sed fallback')
    import subprocess
    subprocess.run(['sed', '-i', '', 's/persistent_peers = \"\"/persistent_peers = \"$PERSISTENT_PEERS\"/', '$PCHAIN_HOME/config/config.toml'])
"
        else
            sed -i '' 's/persistent_peers = ""/persistent_peers = "'$PERSISTENT_PEERS'"/' "$PCHAIN_HOME/config/config.toml"
        fi
    fi
    
    # Configure gas prices
    if [[ "$GAS_PRICES" != "null" && "$GAS_PRICES" != "" ]]; then
        print_status "Configuring gas prices..."
        if command -v python3 >/dev/null 2>&1; then
            python3 -c "
import toml
try:
    with open('$PCHAIN_HOME/config/app.toml', 'r') as f:
        config = toml.load(f)
    config['minimum-gas-prices'] = '$GAS_PRICES'
    with open('$PCHAIN_HOME/config/app.toml', 'w') as f:
        toml.dump(config, f)
except ImportError:
    print('toml library not available, using sed fallback')
    import subprocess
    subprocess.run(['sed', '-i', '', 's/minimum-gas-prices = \"\"/minimum-gas-prices = \"$GAS_PRICES\"/', '$PCHAIN_HOME/config/app.toml'])
"
        else
            sed -i '' 's/minimum-gas-prices = ""/minimum-gas-prices = "'$GAS_PRICES'"/' "$PCHAIN_HOME/config/app.toml"
        fi
    fi
    
    print_success "✅ Node initialized successfully!"
    print_status "Home directory: $PCHAIN_HOME"
    print_status "Run './push-node-manager-mac start' to start the node"
}

# Start node
start_node() {
    print_status "🚀 Starting Push Chain node..."
    
    check_binary
    
    if [[ ! -d "$PCHAIN_HOME/config" ]]; then
        print_error "Node not initialized. Run './push-node-manager-mac init' first"
        exit 1
    fi
    
    print_status "Starting node with home: $PCHAIN_HOME"
    "$PCHAIND_BINARY" start --home "$PCHAIN_HOME"
}

# Stop node (just for compatibility)
stop_node() {
    print_status "🛑 Stopping Push Chain node..."
    pkill -f "pchaind.*start" || print_warning "No running node found"
}

# Show status
show_status() {
    print_status "📊 Push Chain Node Status (Mac Development)"
    
    if pgrep -f "pchaind.*start" >/dev/null; then
        print_success "✅ Node is running"
        print_status "PID: $(pgrep -f 'pchaind.*start')"
    else
        print_warning "⚠️  Node is not running"
    fi
    
    if [[ -f "$PCHAIND_BINARY" ]]; then
        VERSION=$("$PCHAIND_BINARY" version 2>/dev/null || echo "unknown")
        print_status "Binary: $PCHAIND_BINARY (version: $VERSION)"
    else
        print_error "Binary not found: $PCHAIND_BINARY"
    fi
    
    print_status "Home: $PCHAIN_HOME"
    print_status "Network: $NETWORK"
}

# Show logs (just show last few lines of output)
show_logs() {
    print_status "📋 Recent logs (use 'tail -f ~/.pchain-dev/logs/node.log' for live logs)"
    if [[ -f "$PCHAIN_HOME/logs/node.log" ]]; then
        tail -50 "$PCHAIN_HOME/logs/node.log"
    else
        print_warning "No log file found. Node may not be running or logging to stdout."
    fi
}

# Main command handling
case "${1:-help}" in
    "init")
        init_node
        ;;
    "start")
        start_node
        ;;
    "stop")
        stop_node
        ;;
    "status")
        show_status
        ;;
    "logs")
        show_logs
        ;;
    "help"|*)
        echo ""
        echo "    ____             __       ________          _"
        echo "   / __ \\__  _______/ /_     / ____/ /_  ____ _(_)___"
        echo "  / /_/ / / / / ___/ __ \\   / /   / __ \\/ __ \`/ / __ \\"
        echo " / ____/ /_/ (__  ) / / /  / /___/ / / / /_/ / / / / /"
        echo "/_/    \\__,_/____/_/ /_/   \\____/_/ /_/\\__,_/_/_/ /_/"
        echo ""
        echo "          Push Node Manager for Mac v2.0.0"
        echo "        ═══════════════════════════════════════════"
        echo ""
        echo "Usage: ./push-node-manager-mac <command>"
        echo ""
        echo "Commands:"
        echo "  init     Initialize the node configuration"
        echo "  start    Start the Push Chain node"
        echo "  stop     Stop the Push Chain node"
        echo "  status   Show node status"
        echo "  logs     Show recent logs"
        echo "  help     Show this help message"
        echo ""
        echo "Prerequisites:"
        echo "  1. Run './build-mac.sh' to build the binary"
        echo "  2. Ensure configs/networks.json exists"
        echo ""
        ;;
esac 