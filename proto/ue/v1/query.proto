syntax = "proto3";
package ue.v1;

import "google/api/annotations.proto";
import "ue/v1/params.proto";
import "ue/v1/state.proto";

option go_package = "github.com/rollchains/pchain/x/ue/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ue/v1/params";
  }

  // AdminParams queries all admin-controlled parameters of the module.
  rpc AdminParams(QueryAdminParamsRequest) returns (QueryAdminParamsResponse) {
    option (google.api.http).get = "/ue/v1/admin_params";
  }

  // ChainConfig queries a ChainConfig by chain_id.
  rpc ChainConfig(QueryChainConfigRequest) returns (QueryChainConfigResponse) {
    option (google.api.http).get = "/ue/v1/chain_config/{chain_id}";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

// QueryAdminParamsRequest is the request type for the Query/AdminParams RPC method.
message QueryAdminParamsRequest {}

// QueryAdminParamsResponse is the response type for the Query/AdminParams RPC method.
message QueryAdminParamsResponse {
  // admin_params defines the admin-controlled parameters of the module.
  AdminParams admin_params = 1;
}

// QueryChainConfigRequest is the request type for querying a ChainConfig by chain_id.
message QueryChainConfigRequest {
  string chain_id = 1;
}

// QueryChainConfigResponse is the response type containing the ChainConfig.
message QueryChainConfigResponse {
  ChainConfig config = 1;
}