syntax = "proto3";
package ue.v1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";

option go_package = "github.com/rollchains/pchain/x/ue/types";

// Params defines the set of module parameters.
message Params {
  option (amino.name) = "ue/params";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  // The admin account of the ue module.
  string admin = 1;
}

// CrossChainPayload mirrors the Solidity struct
message CrossChainPayload {
  option (amino.name) = "ue/crosschain_payload";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string target = 1;                 // EVM address as hex string (0x...)
  string value = 2;                  // Amount in wei as string (uint256)
  string data = 3;                    // ABI-encoded calldata
  string gas_limit = 4;             // uint256 as string
  string max_fee_per_gas = 5;       // uint256 as string
  string max_priority_fee_per_gas = 6; // uint256 as string
  string nonce = 7;                 // uint256 as string
  string deadline = 8;              // uint256 as string
}

// VM_TYPE is the type of the vm of the network
enum VM_TYPE {
  EVM = 0;
  SVM = 1;
  MOVE_VM = 2;
  WASM_VM = 3;
  CAIRO_VM = 4;
  OTHER_VM = 5;
}

// AccountId is the identifier of a crosschain owner account
message AccountId {
  option (amino.name) = "ue/account_id";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string namespace = 1; 
  string chain_id = 2;
  string owner_key = 3;
  VM_TYPE vm_type = 4;
}

// ChainConfig defines the configuration for a supported source or destination chain
message ChainConfig {
  option (amino.name) = "ue/chain_config";
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  string namespace = 1; // Namespace for the chain configuration
  string chain_id = 2; // Unique identifier for the chain
  string public_rpc_url = 3; // RPC URL for the chain
  VM_TYPE vm_type = 4; // Type of the VM used by the chain
  
  string locker_contract_address = 5; // locker_contract_address is the address of the fee locker contract on the external chain
  uint64 block_confirmation = 6; // block_confirmation is the number of blocks to wait for confirmation on the external chain
  
  string funds_added_event_topic = 7; // funds_added_event_topic is the event topic signature for FundsAdded event

  bool enabled = 8; // Whether this chain is currently enabled or not
}