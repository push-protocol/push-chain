syntax = "proto3";
package crosschain.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "crosschain/v1/params.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/rollchains/pchain/x/crosschain/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a governance operation for updating the parameters.
  //
  // Since: cosmos-sdk 0.47
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // UpdateAdminParams defines a admin operation for updating the admin parameters.
  rpc UpdateAdminParams(MsgUpdateAdminParams) returns (MsgUpdateAdminParamsResponse);

  // DeployNMSC defines a message to deploy a new smart account.
  rpc DeployNMSC(MsgDeployNMSC) returns (MsgDeployNMSCResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (amino.name) = "crosschain/MsgUpdateParams";
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgUpdateAdminParams is the message used by the admin to update AdminParams.
message MsgUpdateAdminParams {
  option (amino.name) = "crosschain/MsgUpdateAdminParams";
  option (cosmos.msg.v1.signer) = "admin";

  // admin is the address authorized to update admin parameters.
  string admin = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // admin_params defines the admin-only parameters to update.
  //
  // NOTE: All fields must be supplied.
  AdminParams admin_params = 2 [(gogoproto.nullable) = false];
}

// MsgUpdateAdminParamsResponse defines the response for MsgUpdateAdminParams.
message MsgUpdateAdminParamsResponse {}

// MsgDeployNMSC is the message used to deploy a new smart account.
message MsgDeployNMSC {
  option (amino.name) = "crosschain/MsgDeployNMSC";
  option (cosmos.msg.v1.signer) = "signer";

  // signer is the Cosmos address initiating the tx (used for tx signing)
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // userKey is the EVM address (as bytes) that will become the smart account owner
  string user_key = 2;

  // caip_string is used for generating deterministic salt for the smart account
  string caip_string = 3;

  // owner_type corresponds to the SmartAccountV1.OwnerType enum used in the contract
  uint32 owner_type = 4;
}

// MsgDeployNMSCResponse defines the response for MsgDeployNMSC.
message MsgDeployNMSCResponse {
  // smart_account is the address of the newly deployed smart account
  bytes smart_account = 1;
}