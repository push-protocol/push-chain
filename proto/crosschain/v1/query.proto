syntax = "proto3";
package crosschain.v1;

import "google/api/annotations.proto";
import "crosschain/v1/genesis.proto";

option go_package = "github.com/rollchains/pchain/x/crosschain/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params queries all parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/crosschain/v1/params";
  }

  // FactoryAddress queries the address of the factory contract.
  rpc FactoryAddress(QueryFactoryAddressRequest) returns (QueryFactoryAddressResponse) {
    option (google.api.http).get = "/crosschain/v1/factory_address";
  }

  // VerifierPrecompile queries the address of the verifier precompile contract.
  rpc VerifierPrecompile(QueryVerifierPrecompileRequest) returns (QueryVerifierPrecompileResponse) {
    option (google.api.http).get = "/crosschain/v1/verifier_precompile";
  }
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1;
}

// QueryFactoryAddressRequest is the request type for the Query/FactoryAddress RPC method.
message QueryFactoryAddressRequest {}

// QueryFactoryAddressResponse is the response type for the Query/FactoryAddress RPC method.
// It returns the address of the factory contract.
message QueryFactoryAddressResponse {
  string factory_address = 1;
}

// QueryVerifierPrecompileRequest is the request type for the Query/VerifierPrecompile RPC method.
message QueryVerifierPrecompileRequest {}

// QueryVerifierPrecompileResponse is the response type for the Query/VerifierPrecompile RPC method.
// It returns the address of the verifier precompile contract.
message QueryVerifierPrecompileResponse {
  string verifier_precompile = 1;
}