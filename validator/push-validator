#!/bin/bash
# Push Chain Validator Control Script

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPT_DIR"

# Source common functions if available (we're outside container)
if [ -f "$SCRIPT_DIR/scripts/common.sh" ]; then
    source "$SCRIPT_DIR/scripts/common.sh"
else
    # Define colors locally if common.sh not available
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'
    RED='\033[0;31m'
    YELLOW='\033[0;33m'
    NC='\033[0m'
    
    # Define local versions of print functions
    print_status() {
        echo -e "${BLUE}$1${NC}"
    }
    
    print_success() {
        echo -e "${GREEN}$1${NC}"
    }
    
    print_error() {
        echo -e "${RED}$1${NC}"
    }
    
    print_warning() {
        echo -e "${YELLOW}$1${NC}"
    }
fi

# Load environment
if [ -f .env ]; then
    export $(cat .env | grep -v '^#' | xargs)
fi

# Docker compose command (support both old and new versions)
if docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi


# Main commands
case "$1" in
    start)
        print_status "üöÄ Starting Push Chain Validator..."
        
        # Check if already running
        if $DOCKER_COMPOSE ps | grep -q "push-validator.*Up"; then
            print_warning "‚ö†Ô∏è  Validator is already running!"
            exit 0
        fi
        
        # Build image if needed
        if ! docker images | grep -q "push-validator.*local"; then
            print_status "üî® Building validator image..."
            $DOCKER_COMPOSE build
        fi
        
        # Start services
        $DOCKER_COMPOSE up -d
        
        # Check for AppHash errors in first 10 seconds
        print_status "üîç Checking for sync issues..."
        sleep 5
        
        if $DOCKER_COMPOSE logs --tail=50 2>&1 | grep -q "wrong Block.Header.AppHash"; then
            print_error "‚ùå AppHash mismatch detected - blockchain data incompatible with genesis"
            echo ""
            echo "This usually happens when:"
            echo "1. Genesis file was updated"
            echo "2. Switching between networks"
            echo "3. Blockchain data is corrupted"
            echo ""
            read -p "Would you like to clean data and restart? (yes/no): " -r
            if [[ $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
                print_status "üßπ Cleaning blockchain data..."
                $DOCKER_COMPOSE down -v
                print_status "üöÄ Starting fresh..."
                $DOCKER_COMPOSE up -d
                print_success "‚úÖ Validator restarted with clean data!"
            else
                print_warning "‚ö†Ô∏è  Validator may not sync properly without cleaning data"
            fi
        else
            print_success "‚úÖ Validator started successfully!"
        fi
        
        echo ""
        echo "Check status with: ./push-validator status"
        echo "View logs with: ./push-validator logs"
        ;;
        
    stop)
        print_status "üõë Stopping validator..."
        $DOCKER_COMPOSE down
        print_success "‚úÖ Validator stopped"
        ;;
        
    restart)
        print_status "üîÑ Restarting validator..."
        $DOCKER_COMPOSE restart
        print_success "‚úÖ Validator restarted"
        ;;
        
    status)
        print_status "üìä Validator Status"
        echo "=================="
        
        # First check if Docker is running
        if ! docker info >/dev/null 2>&1; then
            print_error "‚ùå Docker is not running"
            echo "Please start Docker first"
            exit 1
        fi
        
        # Check if container exists
        if ! docker ps -a --format '{{.Names}}' | grep -q "push-validator"; then
            print_error "‚ùå Validator container not found"
            echo "Run './push-validator start' to create and start the validator"
            exit 1
        fi
        
        # Check if container is running
        if ! docker ps --format '{{.Names}}' | grep -q "push-validator"; then
            print_error "‚ùå Validator not running"
            echo "Start with: ./push-validator start"
            exit 1
        fi
        
        # Get node status
        NODE_STATUS=$($DOCKER_COMPOSE exec -T validator pchaind status --home /root/.pchain 2>/dev/null)
        
        if [ -z "$NODE_STATUS" ]; then
            print_warning "‚è≥ Node is starting up..."
            echo "This can take a few minutes. Try again shortly."
            echo ""
            echo "You can check logs with: ./push-validator logs"
            exit 0
        fi
        
        # Parse and display local node status
        echo "$NODE_STATUS" | jq -r '
            "Node ID: \(.node_info.id)
Network: \(.node_info.network)
Moniker: \(.node_info.moniker)
Version: \(.node_info.version)

Sync Status:
  Local Block Height: \(.sync_info.latest_block_height)
  Latest Block Time: \(.sync_info.latest_block_time)
  Catching Up: \(.sync_info.catching_up)"
        ' || print_error "Failed to parse node status"
        
        # Get remote node status to show sync progress
        # Try to get from genesis node using curl
        REMOTE_STATUS=$(curl -s --connect-timeout 5 http://34.57.209.0:26657/status 2>/dev/null || echo "")
        
        if [ -n "$REMOTE_STATUS" ]; then
            REMOTE_HEIGHT=$(echo "$REMOTE_STATUS" | jq -r '.result.sync_info.latest_block_height // "unknown"' 2>/dev/null || echo "unknown")
            if [ "$REMOTE_HEIGHT" != "unknown" ] && [ "$REMOTE_HEIGHT" != "null" ]; then
                LOCAL_HEIGHT=$(echo "$NODE_STATUS" | jq -r '.sync_info.latest_block_height // "0"' 2>/dev/null || echo "0")
                
                # Calculate sync percentage
                if [ "$REMOTE_HEIGHT" -gt 0 ] && [ "$LOCAL_HEIGHT" -gt 0 ]; then
                    SYNC_PERCENT=$(awk -v local=$LOCAL_HEIGHT -v remote=$REMOTE_HEIGHT 'BEGIN {printf "%.1f", (local/remote)*100}')
                    BLOCKS_BEHIND=$((REMOTE_HEIGHT - LOCAL_HEIGHT))
                    
                    echo "  Remote Block Height: $REMOTE_HEIGHT"
                    
                    # Color code the sync progress
                    if [ $(echo "$SYNC_PERCENT" | awk '{print ($1 >= 99)}') -eq 1 ]; then
                        echo -e "  Sync Progress: ${GREEN}${SYNC_PERCENT}% ($BLOCKS_BEHIND blocks behind)${NC}"
                    elif [ $(echo "$SYNC_PERCENT" | awk '{print ($1 >= 90)}') -eq 1 ]; then
                        echo -e "  Sync Progress: ${YELLOW}${SYNC_PERCENT}% ($BLOCKS_BEHIND blocks behind)${NC}"
                    else
                        echo -e "  Sync Progress: ${RED}${SYNC_PERCENT}% ($BLOCKS_BEHIND blocks behind)${NC}"
                    fi
                else
                    echo "  Remote Block Height: $REMOTE_HEIGHT"
                fi
            fi
        fi
        
        # Show validator info
        echo ""
        echo "Validator Info:"
        echo "$NODE_STATUS" | jq -r '
            "  Voting Power: \(.validator_info.voting_power)"
        ' || echo "  Voting Power: 0"
        ;;
        
    logs)
        # Optional: filter by service
        SERVICE="${2:-validator}"
        TAIL="${3:-100}"
        
        print_status "üìú Showing logs for $SERVICE (last $TAIL lines)..."
        $DOCKER_COMPOSE logs -f --tail=$TAIL $SERVICE
        ;;
        
    backup)
        print_status "üíæ Creating secure backup..."
        
        # Create backup directory
        BACKUP_DIR="backups"
        mkdir -p "$BACKUP_DIR"
        
        # Run secure backup script inside container
        $DOCKER_COMPOSE exec -T validator /scripts/backup-keys.sh backup || {
            # Fallback to simple backup if new script not available
            print_warning "Using simple backup method..."
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            $DOCKER_COMPOSE exec -T validator tar -czf - \
                /root/.pchain/config/priv_validator_key.json \
                /root/.pchain/config/node_key.json \
                /root/.pchain/data/priv_validator_state.json 2>/dev/null \
                > "$BACKUP_DIR/validator-keys-${TIMESTAMP}.tar.gz"
            print_success "‚úÖ Backup complete: $BACKUP_DIR/validator-keys-${TIMESTAMP}.tar.gz"
        }
        
        # Also backup local config
        if [ -f .env ]; then
            cp .env "$BACKUP_DIR/.env.backup"
        fi
        ;;
        
    shell)
        print_status "üêö Opening shell in validator container..."
        $DOCKER_COMPOSE exec validator /bin/sh
        ;;
        
    reset-data)
        print_warning "‚ö†Ô∏è  This will reset blockchain data only!"
        echo "Your wallets and validator keys will be preserved."
        echo "Use this to fix sync issues or clear corrupted data."
        echo ""
        echo "Choose reset method:"
        echo "1) Quick reset (node stays running)"
        echo "2) Clean reset (stop node and remove volumes)"
        read -p "Choose option (1-2): " reset_option
        
        case "$reset_option" in
            1)
                # Check if container is running
                if ! $DOCKER_COMPOSE ps | grep -q "push-validator.*Up"; then
                    print_error "‚ùå Node is not running!"
                    echo "Start the node first: ./push-validator start"
                    exit 1
                fi
                
                if [[ $(read -p "Proceed with quick reset? (yes/no): " -r && echo $REPLY) == "yes" ]]; then
                    print_status "üîÑ Resetting blockchain data..."
                    $DOCKER_COMPOSE exec -T validator pchaind tendermint unsafe-reset-all --home /root/.pchain
                    print_success "‚úÖ Blockchain data reset"
                    echo "Restart your node to begin syncing: ./push-validator restart"
                else
                    echo "Reset cancelled"
                fi
                ;;
            2)
                if [[ $(read -p "Proceed with clean reset? (yes/no): " -r && echo $REPLY) == "yes" ]]; then
                    print_status "üõë Stopping validator..."
                    $DOCKER_COMPOSE down -v
                    
                    # Also remove host data directory
                    if [ -d "./data" ]; then
                        print_status "üóëÔ∏è  Removing host data directory..."
                        rm -rf ./data
                    fi
                    
                    print_success "‚úÖ Blockchain data cleaned"
                    echo "Start fresh with: ./push-validator start"
                else
                    echo "Reset cancelled"
                fi
                ;;
            *)
                print_error "Invalid option"
                ;;
        esac
        ;;
        
    reset-all)
        print_error "üö® DANGER: Complete Reset!"
        echo "This will DELETE EVERYTHING:"
        echo "  ‚Ä¢ All blockchain data"
        echo "  ‚Ä¢ All wallets and keys"
        echo "  ‚Ä¢ All validator configuration"
        echo "  ‚Ä¢ Docker volumes and images"
        echo ""
        echo "You will need to:"
        echo "  1. Create new wallets"
        echo "  2. Get new tokens from faucet"
        echo "  3. Re-register as validator"
        echo ""
        read -p "Type 'DELETE EVERYTHING' to confirm: " -r
        if [[ $REPLY == "DELETE EVERYTHING" ]]; then
            # Call the reset script with skip-confirm flag
            if [ -f "$SCRIPT_DIR/reset-validator.sh" ]; then
                bash "$SCRIPT_DIR/reset-validator.sh" --skip-confirm
            else
                print_error "Reset script not found!"
                exit 1
            fi
        else
            echo "Reset cancelled"
        fi
        ;;
        
    keys)
        # Key management subcommands
        case "$2" in
            list)
                $DOCKER_COMPOSE exec -T validator pchaind keys list --keyring-backend test --home /root/.pchain
                ;;
            add)
                KEY_NAME="${3:-validator}"
                print_status "üîë Creating new key: $KEY_NAME"
                $DOCKER_COMPOSE exec validator pchaind keys add $KEY_NAME --keyring-backend test --home /root/.pchain
                ;;
            show)
                KEY_NAME="${3:-validator}"
                $DOCKER_COMPOSE exec -T validator pchaind keys show $KEY_NAME --keyring-backend test --home /root/.pchain
                ;;
            *)
                echo "Usage: ./push-validator keys {list|add|show} [key-name]"
                ;;
        esac
        ;;
        
    update)
        print_status "üîÑ Updating validator..."
        git pull
        $DOCKER_COMPOSE pull
        print_success "‚úÖ Update complete. Restart validator to apply changes."
        ;;
        
    monitor)
        # Simple monitoring view
        print_status "üìä Monitoring validator (Ctrl+C to exit)..."
        while true; do
            clear
            echo -e "${BLUE}Push Chain Validator Monitor${NC}"
            echo "============================="
            echo "Time: $(date)"
            echo ""
            
            # Get basic status
            if $DOCKER_COMPOSE exec -T validator pchaind status --home /root/.pchain 2>/dev/null | jq -r '
                "Height: \(.sync_info.latest_block_height)
Catching Up: \(.sync_info.catching_up)
Connected: true"
            '; then
                echo ""
            else
                print_error "Node not responding..."
            fi
            
            sleep 5
        done
        ;;
        
    test|health|check)
        # Run comprehensive health check tests
        if [ -f "$SCRIPT_DIR/test-validator.sh" ]; then
            print_status "üöÄ Running comprehensive health checks..."
            bash "$SCRIPT_DIR/test-validator.sh"
        else
            print_error "Test script not found!"
            exit 1
        fi
        ;;
        
    setup)
        # Interactive wallet setup and validator registration
        print_status "üöÄ Starting interactive validator setup wizard..."
        $DOCKER_COMPOSE exec -it validator /scripts/setup-validator.sh
        ;;
        
    auto-register|register)
        # Automatic registration for CI/CD deployments
        print_status "‚ö° Starting automatic validator registration..."
        
        # This command is designed for automated deployments where:
        # 1. Wallet is already created and funded
        # 2. You want minimal interaction
        
        # Check if validator wallet exists
        if ! $DOCKER_COMPOSE exec -T validator pchaind keys show validator --keyring-backend test --home /root/.pchain >/dev/null 2>&1; then
            print_error "‚ùå No 'validator' wallet found!"
            echo ""
            echo "For automated registration, you need to:"
            echo "1. First run: ./push-validator setup (to create/import wallet)"
            echo "2. Fund the wallet with at least 1.3 PUSH"
            echo "3. Then run: ./push-validator auto-register"
            echo ""
            echo "For interactive setup, use: ./push-validator setup"
            exit 1
        fi
        
        # Get current balance
        ADDRESS=$($DOCKER_COMPOSE exec -T validator pchaind keys show validator -a --keyring-backend test --home /root/.pchain 2>/dev/null | tr -d '\r')
        print_status "Using wallet: $ADDRESS"
        
        # Run auto-registration with defaults
        cat << 'EOF' | $DOCKER_COMPOSE exec -T validator /scripts/setup-validator.sh
yes
yes
Push-Validator
https://validator.push.org


1
0.1
0.2
0.01
yes
EOF
        ;;
        
    balance|wallet)
        # Check wallet balance
        WALLET_NAME="${2:-validator}"
        print_status "üí∞ Checking wallet balance..."
        
        # Get address
        ADDRESS=$($DOCKER_COMPOSE exec -T validator pchaind keys show $WALLET_NAME -a --keyring-backend test --home /root/.pchain 2>/dev/null | tr -d '\r')
        
        if [ -n "$ADDRESS" ]; then
            echo "Wallet: $WALLET_NAME"
            echo "Address: $ADDRESS"
            
            # Get balance from RPC
            BALANCE=$($DOCKER_COMPOSE exec -T validator pchaind query bank balances $ADDRESS --node tcp://localhost:26657 -o json 2>/dev/null | \
                jq -r '.balances[] | select(.denom=="upc") | .amount // "0"' || echo "0")
            
            if [ "$BALANCE" != "0" ] && [ -n "$BALANCE" ]; then
                # Convert to PUSH (divide by 10^18) using awk instead of bc
                PUSH_AMOUNT=$(awk -v bal="$BALANCE" 'BEGIN {printf "%.6f", bal/1000000000000000000}')
                print_success "Balance: $PUSH_AMOUNT PUSH"
            else
                print_warning "Balance: 0 PUSH"
                
                # Convert to EVM address for faucet
                EVM_ADDRESS=$($DOCKER_COMPOSE exec -T validator pchaind debug addr $ADDRESS 2>/dev/null | grep "hex" | awk '{print "0x"$3}')
                
                if [ -n "$EVM_ADDRESS" ]; then
                    echo
                    echo "To get test tokens:"
                    echo -e "${GREEN}1. Visit: https://faucet.push.org${NC}"
                    echo -e "${GREEN}2. Use this address: ${BOLD}$EVM_ADDRESS${NC}"
                else
                    echo "Get test tokens at: https://faucet.push.org"
                fi
            fi
        else
            print_error "Wallet '$WALLET_NAME' not found"
            echo "Run './push-validator setup' to create a wallet"
        fi
        ;;
        
    help|--help|-h)
        cat << EOF
$(echo -e "${BOLD}Push Chain Validator Manager${NC}")
$(echo -e "${BLUE}Version: 1.0.0${NC}")

Usage: ./push-validator [command] [options]

$(echo -e "${BOLD}Commands:${NC}")
  start         Start the validator node
  stop          Stop the validator node  
  restart       Restart the validator node
  status        Show validator status and sync info
  logs          Show validator logs (live tail)
  test          Run comprehensive health checks
  setup         Interactive wallet setup & validator registration wizard
  auto-register Automatic registration (requires existing funded wallet)
  balance       Check wallet balance and show faucet info
  backup        Backup validator keys to ./backup/ directory
  shell         Open shell in validator container for debugging
  reset-data    Reset blockchain data (keeps wallets) - quick or clean options
  reset-all     $(echo -e "${RED}DANGER:${NC}") Complete reset - deletes EVERYTHING!
  keys          Key management subcommands:
                  list              - List all wallets
                  add <name>        - Create new wallet
                  show <name>       - Show wallet address
                  delete <name>     - Delete wallet (careful!)
  update        Update validator software to latest version
  monitor       Simple monitoring view (Ctrl+C to exit)
  help          Show this help message

$(echo -e "${BOLD}Examples:${NC}")
  ./push-validator start               # Start validator
  ./push-validator logs                # Show live validator logs
  ./push-validator logs -f             # Follow logs (same as above)
  ./push-validator logs validator 50   # Show last 50 lines
  ./push-validator test                # Run health checks
  ./push-validator setup               # Interactive setup wizard (recommended)
  ./push-validator auto-register       # Auto setup with existing wallet
  ./push-validator balance             # Check default wallet balance
  ./push-validator balance wallet2     # Check specific wallet balance
  ./push-validator keys list           # List all wallets
  ./push-validator keys add mykey      # Create new wallet named 'mykey'
  ./push-validator keys show mykey     # Show address for 'mykey'
  ./push-validator backup              # Backup validator keys
  ./push-validator reset-data          # Reset chain data (interactive)
  ./push-validator reset-all           # DANGER: Delete everything!
  ./push-validator monitor             # Watch validator status

$(echo -e "${BOLD}Network Information:${NC}")
  Chain ID:     push_42101-1
  Network:      Testnet
  RPC:          http://localhost:26657
  API:          http://localhost:1317
  Faucet:       https://faucet.push.org
  Min Stake:    1 PUSH
  
$(echo -e "${BOLD}Important Notes:${NC}")
  ‚Ä¢ Validator registration requires minimum 1 PUSH + gas fees (~0.1 PUSH)
  ‚Ä¢ Default wallet name is 'validator'
  ‚Ä¢ All keys are stored in the Docker volume for persistence
  ‚Ä¢ Backup your keys regularly using the 'backup' command
  
$(echo -e "${BOLD}Reset Options Explained:${NC}")
  ‚Ä¢ $(echo -e "${YELLOW}reset-data${NC}") - Reset blockchain data only (keeps wallets)
                 Option 1: Quick reset (node stays running)
                 Option 2: Clean reset (stops node, removes volumes)
                 Use when: Sync issues, corrupted data, AppHash errors
  ‚Ä¢ $(echo -e "${RED}reset-all${NC}")  - DELETES EVERYTHING including wallets!
                 Use when: Complete fresh start needed
                 Warning: Requires new wallet creation & tokens

$(echo -e "${BOLD}Troubleshooting:${NC}")
  ‚Ä¢ If validator won't start: ./push-validator logs
  ‚Ä¢ If sync is stuck: ./push-validator reset-data (option 2)
  ‚Ä¢ If balance shows 0: Check with genesis node (network might be syncing)
  ‚Ä¢ For detailed debugging: ./push-validator shell
  ‚Ä¢ AppHash errors: ./push-validator reset-data (clears incompatible data)

For documentation: Coming soon
For support: Coming soon
EOF
        ;;
        
    *)
        print_error "Unknown command: $1"
        echo "Run './push-validator help' for usage information"
        exit 1
        ;;
esac