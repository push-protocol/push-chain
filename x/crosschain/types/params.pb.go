// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/v1/params.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of module parameters.
type Params struct {
	// The admin account of the crosschain module.
	Admin     string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	SomeValue bool   `protobuf:"varint,2,opt,name=some_value,json=someValue,proto3" json:"some_value,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_585eeb4699201f5e, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *Params) GetSomeValue() bool {
	if m != nil {
		return m.SomeValue
	}
	return false
}

// AdminParams defines parameters only the admin can update.
type AdminParams struct {
	// The factory address (EVM).
	FactoryAddress string `protobuf:"bytes,1,opt,name=factory_address,json=factoryAddress,proto3" json:"factory_address,omitempty"`
	// The verifier precompile contract address (EVM).
	VerifierPrecompile string `protobuf:"bytes,2,opt,name=verifier_precompile,json=verifierPrecompile,proto3" json:"verifier_precompile,omitempty"`
}

func (m *AdminParams) Reset()      { *m = AdminParams{} }
func (*AdminParams) ProtoMessage() {}
func (*AdminParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_585eeb4699201f5e, []int{1}
}
func (m *AdminParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminParams.Merge(m, src)
}
func (m *AdminParams) XXX_Size() int {
	return m.Size()
}
func (m *AdminParams) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminParams.DiscardUnknown(m)
}

var xxx_messageInfo_AdminParams proto.InternalMessageInfo

func (m *AdminParams) GetFactoryAddress() string {
	if m != nil {
		return m.FactoryAddress
	}
	return ""
}

func (m *AdminParams) GetVerifierPrecompile() string {
	if m != nil {
		return m.VerifierPrecompile
	}
	return ""
}

// CrossChainPayload mirrors the Solidity struct
type CrossChainPayload struct {
	Target               string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Value                string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Data                 []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	GasLimit             string `protobuf:"bytes,4,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	MaxFeePerGas         string `protobuf:"bytes,5,opt,name=max_fee_per_gas,json=maxFeePerGas,proto3" json:"max_fee_per_gas,omitempty"`
	MaxPriorityFeePerGas string `protobuf:"bytes,6,opt,name=max_priority_fee_per_gas,json=maxPriorityFeePerGas,proto3" json:"max_priority_fee_per_gas,omitempty"`
	Nonce                string `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Deadline             string `protobuf:"bytes,8,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *CrossChainPayload) Reset()      { *m = CrossChainPayload{} }
func (*CrossChainPayload) ProtoMessage() {}
func (*CrossChainPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_585eeb4699201f5e, []int{2}
}
func (m *CrossChainPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainPayload.Merge(m, src)
}
func (m *CrossChainPayload) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainPayload.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainPayload proto.InternalMessageInfo

func (m *CrossChainPayload) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *CrossChainPayload) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *CrossChainPayload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CrossChainPayload) GetGasLimit() string {
	if m != nil {
		return m.GasLimit
	}
	return ""
}

func (m *CrossChainPayload) GetMaxFeePerGas() string {
	if m != nil {
		return m.MaxFeePerGas
	}
	return ""
}

func (m *CrossChainPayload) GetMaxPriorityFeePerGas() string {
	if m != nil {
		return m.MaxPriorityFeePerGas
	}
	return ""
}

func (m *CrossChainPayload) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *CrossChainPayload) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "crosschain.v1.Params")
	proto.RegisterType((*AdminParams)(nil), "crosschain.v1.AdminParams")
	proto.RegisterType((*CrossChainPayload)(nil), "crosschain.v1.CrossChainPayload")
}

func init() { proto.RegisterFile("crosschain/v1/params.proto", fileDescriptor_585eeb4699201f5e) }

var fileDescriptor_585eeb4699201f5e = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0x41, 0x8b, 0x13, 0x31,
	0x14, 0xc7, 0x3b, 0xeb, 0xb6, 0x76, 0xe2, 0xea, 0xd2, 0x58, 0x74, 0xa8, 0xec, 0x6c, 0x59, 0x14,
	0xcb, 0x1e, 0x3a, 0x2c, 0x82, 0x87, 0xde, 0xd6, 0x05, 0x45, 0xf0, 0x30, 0xcc, 0xc1, 0x83, 0x20,
	0xe1, 0xed, 0x4c, 0x3a, 0x1b, 0x98, 0x4c, 0x42, 0x92, 0x2d, 0xed, 0x57, 0x10, 0x04, 0x8f, 0x1e,
	0xf7, 0x1b, 0xe8, 0xc7, 0xf0, 0xb8, 0x47, 0x8f, 0xd2, 0x1e, 0xf4, 0x63, 0x48, 0x92, 0xa9, 0x1d,
	0x2f, 0xc3, 0xfb, 0xbf, 0xff, 0x3f, 0x2f, 0xbf, 0x3c, 0x06, 0x8d, 0x72, 0x25, 0xb4, 0xce, 0xaf,
	0x80, 0xd5, 0xc9, 0xe2, 0x2c, 0x91, 0xa0, 0x80, 0xeb, 0xa9, 0x54, 0xc2, 0x08, 0x7c, 0x7f, 0xe7,
	0x4d, 0x17, 0x67, 0xa3, 0x61, 0x29, 0x4a, 0xe1, 0x9c, 0xc4, 0x56, 0x3e, 0x34, 0x1a, 0x00, 0x67,
	0xb5, 0x48, 0xdc, 0xd7, 0xb7, 0x4e, 0x3e, 0xa2, 0x5e, 0xea, 0xe6, 0xe0, 0x21, 0xea, 0x42, 0xc1,
	0x59, 0x1d, 0x05, 0xe3, 0x60, 0x12, 0x66, 0x5e, 0xe0, 0x23, 0x84, 0xb4, 0xe0, 0x94, 0x2c, 0xa0,
	0xba, 0xa6, 0xd1, 0xde, 0x38, 0x98, 0xf4, 0xb3, 0xd0, 0x76, 0xde, 0xdb, 0xc6, 0x2c, 0xfe, 0x7a,
	0x73, 0xdc, 0xf9, 0x73, 0x73, 0x1c, 0x7c, 0xfa, 0xfd, 0xfd, 0x74, 0xd0, 0xe2, 0xf3, 0x70, 0x27,
	0x9f, 0x03, 0x74, 0xef, 0xdc, 0x0e, 0x6a, 0x2e, 0x79, 0x8e, 0x0e, 0xe7, 0x90, 0x1b, 0xa1, 0x56,
	0x04, 0x8a, 0x42, 0x51, 0xad, 0x9b, 0xeb, 0x1e, 0x34, 0xed, 0x73, 0xdf, 0xc5, 0x09, 0x7a, 0xb8,
	0xa0, 0x8a, 0xcd, 0x19, 0x55, 0x44, 0x2a, 0x9a, 0x0b, 0x2e, 0x59, 0xe5, 0x01, 0xc2, 0x0c, 0x6f,
	0xad, 0xf4, 0x9f, 0x33, 0x7b, 0xda, 0x26, 0x79, 0xdc, 0x22, 0x71, 0xef, 0x20, 0x0d, 0xcf, 0xb7,
	0x3d, 0x34, 0xb8, 0xb0, 0xde, 0x85, 0xf5, 0x52, 0x58, 0x55, 0x02, 0x0a, 0xfc, 0x08, 0xf5, 0x0c,
	0xa8, 0x92, 0x9a, 0x06, 0xa6, 0x51, 0x76, 0x25, 0xbb, 0x77, 0x87, 0x99, 0x17, 0x18, 0xa3, 0xfd,
	0x02, 0x0c, 0x44, 0x77, 0xc6, 0xc1, 0xe4, 0x20, 0x73, 0x35, 0x7e, 0x82, 0xc2, 0x12, 0x34, 0xa9,
	0x18, 0x67, 0x26, 0xda, 0x77, 0xe9, 0x7e, 0x09, 0xfa, 0x9d, 0xd5, 0xf8, 0x19, 0x3a, 0xe4, 0xb0,
	0x24, 0x73, 0x4a, 0x89, 0xa4, 0x8a, 0x94, 0xa0, 0xa3, 0xae, 0x8b, 0x1c, 0x70, 0x58, 0xbe, 0xa6,
	0x34, 0xa5, 0xea, 0x0d, 0x68, 0xfc, 0x12, 0x45, 0x36, 0x26, 0x15, 0x13, 0x8a, 0x99, 0xd5, 0x7f,
	0xf9, 0x9e, 0xcb, 0x0f, 0x39, 0x2c, 0xd3, 0xc6, 0xde, 0x9d, 0x1b, 0xa2, 0x6e, 0x2d, 0xea, 0x9c,
	0x46, 0x77, 0x3d, 0xa5, 0x13, 0x78, 0x84, 0xfa, 0x05, 0x85, 0xa2, 0x62, 0x35, 0x8d, 0xfa, 0x1e,
	0x68, 0xab, 0x67, 0xa7, 0xed, 0x5d, 0x1d, 0xb5, 0x76, 0xb5, 0x2b, 0x89, 0xf4, 0xbb, 0x79, 0xf5,
	0xf6, 0xc7, 0x3a, 0x0e, 0x6e, 0xd7, 0x71, 0xf0, 0x6b, 0x1d, 0x07, 0x5f, 0x36, 0x71, 0xe7, 0x76,
	0x13, 0x77, 0x7e, 0x6e, 0xe2, 0xce, 0x87, 0xa4, 0x64, 0xe6, 0xea, 0xfa, 0x72, 0x9a, 0x0b, 0x9e,
	0x28, 0x51, 0x55, 0xee, 0x9c, 0x4e, 0xa4, 0x1f, 0xb5, 0x6c, 0x0d, 0x4b, 0xcc, 0x4a, 0x52, 0x7d,
	0xd9, 0x73, 0xbf, 0xdc, 0x8b, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x38, 0x01, 0x6b, 0x3f, 0xc8,
	0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Admin != that1.Admin {
		return false
	}
	if this.SomeValue != that1.SomeValue {
		return false
	}
	return true
}
func (this *AdminParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AdminParams)
	if !ok {
		that2, ok := that.(AdminParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FactoryAddress != that1.FactoryAddress {
		return false
	}
	if this.VerifierPrecompile != that1.VerifierPrecompile {
		return false
	}
	return true
}
func (this *CrossChainPayload) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CrossChainPayload)
	if !ok {
		that2, ok := that.(CrossChainPayload)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.GasLimit != that1.GasLimit {
		return false
	}
	if this.MaxFeePerGas != that1.MaxFeePerGas {
		return false
	}
	if this.MaxPriorityFeePerGas != that1.MaxPriorityFeePerGas {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Deadline != that1.Deadline {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SomeValue {
		i--
		if m.SomeValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerifierPrecompile) > 0 {
		i -= len(m.VerifierPrecompile)
		copy(dAtA[i:], m.VerifierPrecompile)
		i = encodeVarintParams(dAtA, i, uint64(len(m.VerifierPrecompile)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FactoryAddress) > 0 {
		i -= len(m.FactoryAddress)
		copy(dAtA[i:], m.FactoryAddress)
		i = encodeVarintParams(dAtA, i, uint64(len(m.FactoryAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MaxPriorityFeePerGas) > 0 {
		i -= len(m.MaxPriorityFeePerGas)
		copy(dAtA[i:], m.MaxPriorityFeePerGas)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MaxPriorityFeePerGas)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MaxFeePerGas) > 0 {
		i -= len(m.MaxFeePerGas)
		copy(dAtA[i:], m.MaxFeePerGas)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MaxFeePerGas)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GasLimit) > 0 {
		i -= len(m.GasLimit)
		copy(dAtA[i:], m.GasLimit)
		i = encodeVarintParams(dAtA, i, uint64(len(m.GasLimit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.SomeValue {
		n += 2
	}
	return n
}

func (m *AdminParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FactoryAddress)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.VerifierPrecompile)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *CrossChainPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.GasLimit)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MaxFeePerGas)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.MaxPriorityFeePerGas)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SomeValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SomeValue = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FactoryAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FactoryAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifierPrecompile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifierPrecompile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriorityFeePerGas", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPriorityFeePerGas = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
