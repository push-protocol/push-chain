// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUpdateAdminParams is the message used by the admin to update AdminParams.
type MsgUpdateAdminParams struct {
	// admin is the address authorized to update admin parameters.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	// admin_params defines the admin-only parameters to update.
	//
	// NOTE: All fields must be supplied.
	AdminParams AdminParams `protobuf:"bytes,2,opt,name=admin_params,json=adminParams,proto3" json:"admin_params"`
}

func (m *MsgUpdateAdminParams) Reset()         { *m = MsgUpdateAdminParams{} }
func (m *MsgUpdateAdminParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAdminParams) ProtoMessage()    {}
func (*MsgUpdateAdminParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{2}
}
func (m *MsgUpdateAdminParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAdminParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAdminParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAdminParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAdminParams.Merge(m, src)
}
func (m *MsgUpdateAdminParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAdminParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAdminParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAdminParams proto.InternalMessageInfo

func (m *MsgUpdateAdminParams) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgUpdateAdminParams) GetAdminParams() AdminParams {
	if m != nil {
		return m.AdminParams
	}
	return AdminParams{}
}

// MsgUpdateAdminParamsResponse defines the response for MsgUpdateAdminParams.
type MsgUpdateAdminParamsResponse struct {
}

func (m *MsgUpdateAdminParamsResponse) Reset()         { *m = MsgUpdateAdminParamsResponse{} }
func (m *MsgUpdateAdminParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAdminParamsResponse) ProtoMessage()    {}
func (*MsgUpdateAdminParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{3}
}
func (m *MsgUpdateAdminParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAdminParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAdminParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAdminParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAdminParamsResponse.Merge(m, src)
}
func (m *MsgUpdateAdminParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAdminParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAdminParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAdminParamsResponse proto.InternalMessageInfo

// MsgDeployNMSC is the message used to deploy a new smart account.
type MsgDeployNMSC struct {
	// signer is the Cosmos address initiating the tx (used for tx signing)
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// userKey is the EVM address (as bytes) that will become the smart account owner
	UserKey string `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	// caip_string is used for generating deterministic salt for the smart account
	CaipString string `protobuf:"bytes,3,opt,name=caip_string,json=caipString,proto3" json:"caip_string,omitempty"`
	// owner_type corresponds to the SmartAccountV1.OwnerType enum used in the contract
	OwnerType uint32 `protobuf:"varint,4,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	// tx_hash is the hash of the transaction in which user locked the tokens
	TxHash string `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *MsgDeployNMSC) Reset()         { *m = MsgDeployNMSC{} }
func (m *MsgDeployNMSC) String() string { return proto.CompactTextString(m) }
func (*MsgDeployNMSC) ProtoMessage()    {}
func (*MsgDeployNMSC) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{4}
}
func (m *MsgDeployNMSC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployNMSC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployNMSC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployNMSC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployNMSC.Merge(m, src)
}
func (m *MsgDeployNMSC) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployNMSC) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployNMSC.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployNMSC proto.InternalMessageInfo

func (m *MsgDeployNMSC) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgDeployNMSC) GetUserKey() string {
	if m != nil {
		return m.UserKey
	}
	return ""
}

func (m *MsgDeployNMSC) GetCaipString() string {
	if m != nil {
		return m.CaipString
	}
	return ""
}

func (m *MsgDeployNMSC) GetOwnerType() uint32 {
	if m != nil {
		return m.OwnerType
	}
	return 0
}

func (m *MsgDeployNMSC) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// MsgDeployNMSCResponse defines the response for MsgDeployNMSC.
type MsgDeployNMSCResponse struct {
	// smart_account is the address of the newly deployed smart account
	SmartAccount []byte `protobuf:"bytes,1,opt,name=smart_account,json=smartAccount,proto3" json:"smart_account,omitempty"`
}

func (m *MsgDeployNMSCResponse) Reset()         { *m = MsgDeployNMSCResponse{} }
func (m *MsgDeployNMSCResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeployNMSCResponse) ProtoMessage()    {}
func (*MsgDeployNMSCResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{5}
}
func (m *MsgDeployNMSCResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeployNMSCResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeployNMSCResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeployNMSCResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeployNMSCResponse.Merge(m, src)
}
func (m *MsgDeployNMSCResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeployNMSCResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeployNMSCResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeployNMSCResponse proto.InternalMessageInfo

func (m *MsgDeployNMSCResponse) GetSmartAccount() []byte {
	if m != nil {
		return m.SmartAccount
	}
	return nil
}

// MsgMintPush represents a message to mint PUSH tokens to a smart account,
// based on the amount locked by the user in the locker contract.
type MsgMintPush struct {
	// signer is the Cosmos address initiating the tx (used for tx signing)
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// tx_hash is the hash of the transaction in which user locked the tokens
	TxHash string `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	// caip_string is used for generating deterministic salt for the smart account
	CaipString string `protobuf:"bytes,3,opt,name=caip_string,json=caipString,proto3" json:"caip_string,omitempty"`
}

func (m *MsgMintPush) Reset()         { *m = MsgMintPush{} }
func (m *MsgMintPush) String() string { return proto.CompactTextString(m) }
func (*MsgMintPush) ProtoMessage()    {}
func (*MsgMintPush) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{6}
}
func (m *MsgMintPush) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintPush) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintPush.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintPush) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintPush.Merge(m, src)
}
func (m *MsgMintPush) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintPush) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintPush.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintPush proto.InternalMessageInfo

func (m *MsgMintPush) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgMintPush) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgMintPush) GetCaipString() string {
	if m != nil {
		return m.CaipString
	}
	return ""
}

// MsgMintPushResponse defines the response for MsgMintPush.
type MsgMintPushResponse struct {
}

func (m *MsgMintPushResponse) Reset()         { *m = MsgMintPushResponse{} }
func (m *MsgMintPushResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintPushResponse) ProtoMessage()    {}
func (*MsgMintPushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{7}
}
func (m *MsgMintPushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintPushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintPushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintPushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintPushResponse.Merge(m, src)
}
func (m *MsgMintPushResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintPushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintPushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintPushResponse proto.InternalMessageInfo

// MsgExecutePayload defines a message for executing a cross-chain payload
type MsgExecutePayload struct {
	// signer is the Cosmos address initiating the tx (used for tx signing)
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// caip_string is used for generating deterministic salt for the smart account
	CaipString string `protobuf:"bytes,2,opt,name=caip_string,json=caipString,proto3" json:"caip_string,omitempty"`
	// payload is the crosschain payload to be executed
	CrosschainPayload *CrossChainPayload `protobuf:"bytes,3,opt,name=crosschain_payload,json=crosschainPayload,proto3" json:"crosschain_payload,omitempty"`
	// signature is the signature of the payload by user
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgExecutePayload) Reset()         { *m = MsgExecutePayload{} }
func (m *MsgExecutePayload) String() string { return proto.CompactTextString(m) }
func (*MsgExecutePayload) ProtoMessage()    {}
func (*MsgExecutePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{8}
}
func (m *MsgExecutePayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutePayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutePayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutePayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutePayload.Merge(m, src)
}
func (m *MsgExecutePayload) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutePayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutePayload.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutePayload proto.InternalMessageInfo

func (m *MsgExecutePayload) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgExecutePayload) GetCaipString() string {
	if m != nil {
		return m.CaipString
	}
	return ""
}

func (m *MsgExecutePayload) GetCrosschainPayload() *CrossChainPayload {
	if m != nil {
		return m.CrosschainPayload
	}
	return nil
}

func (m *MsgExecutePayload) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

// MsgExecutePayloadResponse defines the response for MsgExecutePayload.
type MsgExecutePayloadResponse struct {
}

func (m *MsgExecutePayloadResponse) Reset()         { *m = MsgExecutePayloadResponse{} }
func (m *MsgExecutePayloadResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecutePayloadResponse) ProtoMessage()    {}
func (*MsgExecutePayloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f25e0a13815164b, []int{9}
}
func (m *MsgExecutePayloadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecutePayloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecutePayloadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecutePayloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecutePayloadResponse.Merge(m, src)
}
func (m *MsgExecutePayloadResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecutePayloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecutePayloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecutePayloadResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "crosschain.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "crosschain.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgUpdateAdminParams)(nil), "crosschain.v1.MsgUpdateAdminParams")
	proto.RegisterType((*MsgUpdateAdminParamsResponse)(nil), "crosschain.v1.MsgUpdateAdminParamsResponse")
	proto.RegisterType((*MsgDeployNMSC)(nil), "crosschain.v1.MsgDeployNMSC")
	proto.RegisterType((*MsgDeployNMSCResponse)(nil), "crosschain.v1.MsgDeployNMSCResponse")
	proto.RegisterType((*MsgMintPush)(nil), "crosschain.v1.MsgMintPush")
	proto.RegisterType((*MsgMintPushResponse)(nil), "crosschain.v1.MsgMintPushResponse")
	proto.RegisterType((*MsgExecutePayload)(nil), "crosschain.v1.MsgExecutePayload")
	proto.RegisterType((*MsgExecutePayloadResponse)(nil), "crosschain.v1.MsgExecutePayloadResponse")
}

func init() { proto.RegisterFile("crosschain/v1/tx.proto", fileDescriptor_0f25e0a13815164b) }

var fileDescriptor_0f25e0a13815164b = []byte{
	// 753 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0xe3, 0xb4, 0x4d, 0x9b, 0x93, 0xe4, 0xfb, 0x14, 0xd3, 0x4b, 0x62, 0x82, 0x1b, 0xb9,
	0xa8, 0x8a, 0x0a, 0x8d, 0x69, 0x2b, 0xb1, 0x88, 0xd8, 0xb4, 0x01, 0x89, 0x8b, 0x02, 0x95, 0x0b,
	0x2c, 0x10, 0x92, 0x35, 0x75, 0x2c, 0xc7, 0x22, 0xf6, 0x58, 0x1e, 0xa7, 0xc4, 0x3b, 0x04, 0x3b,
	0x56, 0xbc, 0x02, 0x0f, 0x80, 0xd4, 0x05, 0x3b, 0x1e, 0x80, 0x2e, 0x2b, 0x56, 0xac, 0x00, 0xb5,
	0x8b, 0xbe, 0x06, 0xb2, 0xc7, 0xf1, 0x2d, 0x6d, 0x83, 0xba, 0xa9, 0xe6, 0xdc, 0xfe, 0x73, 0x7e,
	0xc7, 0xa7, 0x13, 0x58, 0x54, 0x6c, 0x4c, 0x88, 0xd2, 0x43, 0xba, 0x29, 0x1e, 0x6c, 0x88, 0xce,
	0xb0, 0x69, 0xd9, 0xd8, 0xc1, 0x6c, 0x29, 0xf2, 0x37, 0x0f, 0x36, 0xb8, 0x32, 0x32, 0x74, 0x13,
	0x8b, 0xfe, 0x5f, 0x9a, 0xc1, 0x2d, 0x29, 0x98, 0x18, 0x98, 0x88, 0x06, 0xd1, 0xbc, 0x4a, 0x83,
	0x68, 0x41, 0x80, 0x4b, 0x4a, 0x5a, 0xc8, 0x46, 0x06, 0x09, 0x62, 0xf3, 0x1a, 0xd6, 0xb0, 0x7f,
	0x14, 0xbd, 0x53, 0xe0, 0xad, 0x52, 0x29, 0x99, 0x06, 0xa8, 0x41, 0x43, 0xc2, 0x17, 0x06, 0xfe,
	0xef, 0x10, 0xed, 0x85, 0xd5, 0x45, 0x8e, 0xba, 0xeb, 0x4b, 0xb1, 0x77, 0x21, 0x8f, 0x06, 0x4e,
	0x0f, 0xdb, 0xba, 0xe3, 0x56, 0x98, 0x3a, 0xd3, 0xc8, 0xef, 0x54, 0x7e, 0x7c, 0x5d, 0x9f, 0x0f,
	0x0a, 0xb7, 0xbb, 0x5d, 0x5b, 0x25, 0x64, 0xcf, 0xb1, 0x75, 0x53, 0x93, 0xa2, 0x54, 0x76, 0x0b,
	0x72, 0xb4, 0x99, 0x4a, 0xb6, 0xce, 0x34, 0x0a, 0x9b, 0x0b, 0xcd, 0x04, 0x64, 0x93, 0xca, 0xef,
	0x4c, 0x1f, 0xfd, 0x5a, 0xce, 0x48, 0x41, 0x6a, 0x6b, 0xfd, 0xfd, 0xd9, 0xe1, 0x5a, 0x24, 0xf2,
	0xf1, 0xec, 0x70, 0x2d, 0x0e, 0x98, 0xea, 0x4d, 0xa8, 0xc2, 0x52, 0xca, 0x25, 0xa9, 0xc4, 0xc2,
	0x26, 0x51, 0x85, 0x6f, 0x0c, 0xcc, 0x87, 0xb1, 0xed, 0xae, 0xa1, 0x9b, 0x01, 0x4f, 0x13, 0x66,
	0x90, 0x67, 0x4e, 0x64, 0xa1, 0x69, 0x6c, 0x1b, 0x8a, 0xfe, 0x41, 0x4e, 0xd0, 0x70, 0x29, 0x9a,
	0xd8, 0x0d, 0x01, 0x52, 0x01, 0x45, 0xae, 0x56, 0xd3, 0xe3, 0xa2, 0x82, 0x1e, 0xd3, 0xf2, 0x79,
	0x4c, 0x31, 0x09, 0x81, 0x87, 0xda, 0x79, 0xfe, 0x90, 0xee, 0x37, 0x03, 0xa5, 0x0e, 0xd1, 0xee,
	0xab, 0x56, 0x1f, 0xbb, 0x4f, 0x3b, 0x7b, 0x6d, 0xf6, 0x0e, 0xe4, 0x88, 0xae, 0x99, 0xaa, 0x3d,
	0x91, 0x2b, 0xc8, 0x63, 0xab, 0x30, 0x37, 0x20, 0xaa, 0x2d, 0xbf, 0x51, 0x5d, 0x1f, 0x2a, 0x2f,
	0xcd, 0x7a, 0xf6, 0x13, 0xd5, 0x65, 0x97, 0xa1, 0xa0, 0x20, 0xdd, 0x92, 0x89, 0x5f, 0x51, 0x99,
	0xf2, 0xa3, 0xe0, 0xb9, 0xa8, 0x06, 0x7b, 0x03, 0x00, 0xbf, 0x35, 0x55, 0x5b, 0x76, 0x5c, 0x4b,
	0xad, 0x4c, 0xd7, 0x99, 0x46, 0x49, 0xca, 0xfb, 0x9e, 0xe7, 0xae, 0xa5, 0xb2, 0x4b, 0x30, 0xeb,
	0x0c, 0xe5, 0x1e, 0x22, 0xbd, 0xca, 0x8c, 0x5f, 0x9b, 0x73, 0x86, 0x0f, 0x11, 0xe9, 0xb5, 0x1a,
	0xde, 0x1c, 0x82, 0x06, 0xbc, 0x41, 0x54, 0x92, 0x83, 0x88, 0x78, 0x84, 0x7b, 0xb0, 0x90, 0x70,
	0x8c, 0xd0, 0xd9, 0x15, 0x28, 0x11, 0x03, 0xd9, 0x8e, 0x8c, 0x14, 0x05, 0x0f, 0x4c, 0xc7, 0xe7,
	0x2d, 0x4a, 0x45, 0xdf, 0xb9, 0x4d, 0x7d, 0xc2, 0x67, 0x06, 0x0a, 0x1d, 0xa2, 0x75, 0x74, 0xd3,
	0xd9, 0x1d, 0x90, 0xde, 0x15, 0xa6, 0x13, 0x43, 0xc8, 0xc6, 0x11, 0x26, 0xce, 0xa6, 0xb5, 0x9a,
	0x62, 0x5c, 0x4c, 0x32, 0x8e, 0x7a, 0x12, 0x16, 0xe0, 0x5a, 0xcc, 0x0c, 0x3f, 0xed, 0x87, 0x2c,
	0x94, 0x3b, 0x44, 0x7b, 0x30, 0x54, 0x95, 0x81, 0xb7, 0xd5, 0x6e, 0x1f, 0xa3, 0xee, 0x15, 0x00,
	0x52, 0x7d, 0x66, 0xc7, 0xbe, 0xe1, 0x33, 0x60, 0xa3, 0xce, 0x64, 0x8b, 0x5e, 0xe4, 0xf3, 0x14,
	0x36, 0xeb, 0xa9, 0xf5, 0x6e, 0x7b, 0x56, 0xdb, 0xb3, 0x82, 0x86, 0xa4, 0x72, 0x94, 0x30, 0xea,
	0xb1, 0x06, 0x79, 0xef, 0x6e, 0xe4, 0x0c, 0x6c, 0xba, 0x13, 0x79, 0x29, 0x72, 0xb4, 0x6e, 0xa7,
	0xc6, 0x52, 0x4b, 0x8e, 0x25, 0xc9, 0x2b, 0x5c, 0x87, 0xea, 0x98, 0x73, 0x34, 0xa2, 0xcd, 0xef,
	0x53, 0x30, 0xd5, 0x21, 0x1a, 0xfb, 0x12, 0x8a, 0x89, 0xa7, 0x8a, 0x4f, 0x75, 0x9d, 0x7a, 0x1b,
	0xb8, 0xd5, 0xcb, 0xe3, 0xe1, 0x8a, 0xa9, 0x50, 0x1e, 0x7f, 0x37, 0x56, 0x2e, 0x2a, 0x8e, 0x25,
	0x71, 0xb7, 0xfe, 0x21, 0x29, 0xbc, 0x66, 0x17, 0x20, 0xf6, 0x0f, 0x5c, 0x1b, 0x2f, 0x8d, 0xa2,
	0xdc, 0xcd, 0xcb, 0xa2, 0xa1, 0xe2, 0x63, 0x98, 0x0b, 0x57, 0x9e, 0x1b, 0xaf, 0x18, 0xc5, 0x38,
	0xe1, 0xe2, 0x58, 0xa8, 0xf5, 0x1a, 0xfe, 0x4b, 0xed, 0x60, 0x7d, 0xbc, 0x2a, 0x99, 0xc1, 0x35,
	0x26, 0x65, 0x8c, 0xd4, 0xb9, 0x99, 0x77, 0x67, 0x87, 0x6b, 0xcc, 0xce, 0xa3, 0xa3, 0x13, 0x9e,
	0x39, 0x3e, 0xe1, 0x99, 0x3f, 0x27, 0x3c, 0xf3, 0xe9, 0x94, 0xcf, 0x1c, 0x9f, 0xf2, 0x99, 0x9f,
	0xa7, 0x7c, 0xe6, 0x95, 0xa8, 0xe9, 0x4e, 0x6f, 0xb0, 0xdf, 0x54, 0xb0, 0x21, 0xda, 0xb8, 0xdf,
	0xf7, 0x35, 0x89, 0x68, 0xd1, 0x85, 0x19, 0x8a, 0xb1, 0xed, 0xf1, 0xde, 0x20, 0xb2, 0x9f, 0xf3,
	0x7f, 0xc2, 0xb6, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x95, 0xfa, 0xc7, 0x64, 0x07, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the parameters.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UpdateAdminParams defines a admin operation for updating the admin parameters.
	UpdateAdminParams(ctx context.Context, in *MsgUpdateAdminParams, opts ...grpc.CallOption) (*MsgUpdateAdminParamsResponse, error)
	// DeployNMSC defines a message to deploy a new smart account.
	DeployNMSC(ctx context.Context, in *MsgDeployNMSC, opts ...grpc.CallOption) (*MsgDeployNMSCResponse, error)
	// MintPush defines a message to mint PUSH tokens to a smart account,
	MintPush(ctx context.Context, in *MsgMintPush, opts ...grpc.CallOption) (*MsgMintPushResponse, error)
	// ExecutePayload defines a message for executing a cross-chain payload
	ExecutePayload(ctx context.Context, in *MsgExecutePayload, opts ...grpc.CallOption) (*MsgExecutePayloadResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/crosschain.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAdminParams(ctx context.Context, in *MsgUpdateAdminParams, opts ...grpc.CallOption) (*MsgUpdateAdminParamsResponse, error) {
	out := new(MsgUpdateAdminParamsResponse)
	err := c.cc.Invoke(ctx, "/crosschain.v1.Msg/UpdateAdminParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeployNMSC(ctx context.Context, in *MsgDeployNMSC, opts ...grpc.CallOption) (*MsgDeployNMSCResponse, error) {
	out := new(MsgDeployNMSCResponse)
	err := c.cc.Invoke(ctx, "/crosschain.v1.Msg/DeployNMSC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintPush(ctx context.Context, in *MsgMintPush, opts ...grpc.CallOption) (*MsgMintPushResponse, error) {
	out := new(MsgMintPushResponse)
	err := c.cc.Invoke(ctx, "/crosschain.v1.Msg/MintPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecutePayload(ctx context.Context, in *MsgExecutePayload, opts ...grpc.CallOption) (*MsgExecutePayloadResponse, error) {
	out := new(MsgExecutePayloadResponse)
	err := c.cc.Invoke(ctx, "/crosschain.v1.Msg/ExecutePayload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the parameters.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UpdateAdminParams defines a admin operation for updating the admin parameters.
	UpdateAdminParams(context.Context, *MsgUpdateAdminParams) (*MsgUpdateAdminParamsResponse, error)
	// DeployNMSC defines a message to deploy a new smart account.
	DeployNMSC(context.Context, *MsgDeployNMSC) (*MsgDeployNMSCResponse, error)
	// MintPush defines a message to mint PUSH tokens to a smart account,
	MintPush(context.Context, *MsgMintPush) (*MsgMintPushResponse, error)
	// ExecutePayload defines a message for executing a cross-chain payload
	ExecutePayload(context.Context, *MsgExecutePayload) (*MsgExecutePayloadResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) UpdateAdminParams(ctx context.Context, req *MsgUpdateAdminParams) (*MsgUpdateAdminParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminParams not implemented")
}
func (*UnimplementedMsgServer) DeployNMSC(ctx context.Context, req *MsgDeployNMSC) (*MsgDeployNMSCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployNMSC not implemented")
}
func (*UnimplementedMsgServer) MintPush(ctx context.Context, req *MsgMintPush) (*MsgMintPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintPush not implemented")
}
func (*UnimplementedMsgServer) ExecutePayload(ctx context.Context, req *MsgExecutePayload) (*MsgExecutePayloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePayload not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosschain.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAdminParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAdminParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAdminParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosschain.v1.Msg/UpdateAdminParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAdminParams(ctx, req.(*MsgUpdateAdminParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeployNMSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeployNMSC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeployNMSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosschain.v1.Msg/DeployNMSC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeployNMSC(ctx, req.(*MsgDeployNMSC))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintPush)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosschain.v1.Msg/MintPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintPush(ctx, req.(*MsgMintPush))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecutePayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecutePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecutePayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crosschain.v1.Msg/ExecutePayload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecutePayload(ctx, req.(*MsgExecutePayload))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crosschain.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UpdateAdminParams",
			Handler:    _Msg_UpdateAdminParams_Handler,
		},
		{
			MethodName: "DeployNMSC",
			Handler:    _Msg_DeployNMSC_Handler,
		},
		{
			MethodName: "MintPush",
			Handler:    _Msg_MintPush_Handler,
		},
		{
			MethodName: "ExecutePayload",
			Handler:    _Msg_ExecutePayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crosschain/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAdminParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAdminParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAdminParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AdminParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAdminParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAdminParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAdminParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeployNMSC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployNMSC) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployNMSC) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OwnerType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OwnerType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CaipString) > 0 {
		i -= len(m.CaipString)
		copy(dAtA[i:], m.CaipString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CaipString)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.UserKey) > 0 {
		i -= len(m.UserKey)
		copy(dAtA[i:], m.UserKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.UserKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeployNMSCResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeployNMSCResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeployNMSCResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SmartAccount) > 0 {
		i -= len(m.SmartAccount)
		copy(dAtA[i:], m.SmartAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SmartAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintPush) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintPush) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintPush) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CaipString) > 0 {
		i -= len(m.CaipString)
		copy(dAtA[i:], m.CaipString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CaipString)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintPushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintPushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintPushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecutePayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutePayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutePayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.CrosschainPayload != nil {
		{
			size, err := m.CrosschainPayload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CaipString) > 0 {
		i -= len(m.CaipString)
		copy(dAtA[i:], m.CaipString)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CaipString)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecutePayloadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecutePayloadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecutePayloadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAdminParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AdminParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateAdminParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeployNMSC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.UserKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CaipString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OwnerType != 0 {
		n += 1 + sovTx(uint64(m.OwnerType))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeployNMSCResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SmartAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintPush) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CaipString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintPushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecutePayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CaipString)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CrosschainPayload != nil {
		l = m.CrosschainPayload.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecutePayloadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAdminParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAdminParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAdminParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AdminParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAdminParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAdminParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAdminParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployNMSC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployNMSC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployNMSC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaipString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaipString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerType", wireType)
			}
			m.OwnerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeployNMSCResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeployNMSCResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeployNMSCResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartAccount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SmartAccount = append(m.SmartAccount[:0], dAtA[iNdEx:postIndex]...)
			if m.SmartAccount == nil {
				m.SmartAccount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintPush) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintPush: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintPush: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaipString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaipString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintPushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintPushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintPushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutePayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaipString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaipString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrosschainPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrosschainPayload == nil {
				m.CrosschainPayload = &CrossChainPayload{}
			}
			if err := m.CrosschainPayload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecutePayloadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecutePayloadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecutePayloadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
