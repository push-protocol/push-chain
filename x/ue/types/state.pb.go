// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ue/v1/state.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChainConfig defines the configuration for a supported source or destination chain
type ChainConfig struct {
	Namespace             string  `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ChainId               string  `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	PublicRpcUrl          string  `protobuf:"bytes,3,opt,name=public_rpc_url,json=publicRpcUrl,proto3" json:"public_rpc_url,omitempty"`
	VmType                VM_TYPE `protobuf:"varint,4,opt,name=vm_type,json=vmType,proto3,enum=ue.v1.VM_TYPE" json:"vm_type,omitempty"`
	LockerContractAddress string  `protobuf:"bytes,5,opt,name=locker_contract_address,json=lockerContractAddress,proto3" json:"locker_contract_address,omitempty"`
	BlockConfirmation     uint64  `protobuf:"varint,6,opt,name=block_confirmation,json=blockConfirmation,proto3" json:"block_confirmation,omitempty"`
	FundsAddedEventTopic  string  `protobuf:"bytes,7,opt,name=funds_added_event_topic,json=fundsAddedEventTopic,proto3" json:"funds_added_event_topic,omitempty"`
}

func (m *ChainConfig) Reset()      { *m = ChainConfig{} }
func (*ChainConfig) ProtoMessage() {}
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_c2131d37cb5dd832, []int{0}
}
func (m *ChainConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainConfig.Merge(m, src)
}
func (m *ChainConfig) XXX_Size() int {
	return m.Size()
}
func (m *ChainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ChainConfig proto.InternalMessageInfo

func (m *ChainConfig) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ChainConfig) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainConfig) GetPublicRpcUrl() string {
	if m != nil {
		return m.PublicRpcUrl
	}
	return ""
}

func (m *ChainConfig) GetVmType() VM_TYPE {
	if m != nil {
		return m.VmType
	}
	return VM_TYPE_EVM
}

func (m *ChainConfig) GetLockerContractAddress() string {
	if m != nil {
		return m.LockerContractAddress
	}
	return ""
}

func (m *ChainConfig) GetBlockConfirmation() uint64 {
	if m != nil {
		return m.BlockConfirmation
	}
	return 0
}

func (m *ChainConfig) GetFundsAddedEventTopic() string {
	if m != nil {
		return m.FundsAddedEventTopic
	}
	return ""
}

func init() {
	proto.RegisterType((*ChainConfig)(nil), "ue.v1.ChainConfig")
}

func init() { proto.RegisterFile("ue/v1/state.proto", fileDescriptor_c2131d37cb5dd832) }

var fileDescriptor_c2131d37cb5dd832 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcf, 0x6b, 0x14, 0x31,
	0x14, 0xc7, 0x27, 0xb5, 0xdd, 0xb5, 0x51, 0x56, 0x36, 0x54, 0x3a, 0x96, 0x32, 0x5d, 0x44, 0xe8,
	0x22, 0x38, 0xa1, 0x8a, 0x1e, 0xbc, 0xad, 0x43, 0x0f, 0x1e, 0x04, 0x19, 0x56, 0x41, 0x2f, 0x21,
	0x93, 0xc9, 0x4e, 0x83, 0x33, 0x49, 0xc8, 0x8f, 0xc1, 0xfe, 0x0b, 0x9e, 0x3c, 0x7a, 0xec, 0x9f,
	0xe0, 0x9f, 0xe1, 0xb1, 0xde, 0x3c, 0xca, 0xee, 0x41, 0xff, 0x0c, 0x49, 0x66, 0xc1, 0x5e, 0x92,
	0x97, 0xef, 0xe7, 0xbd, 0xef, 0x23, 0xef, 0xc1, 0xa9, 0xe7, 0xb8, 0x3f, 0xc3, 0xd6, 0x51, 0xc7,
	0x73, 0x6d, 0x94, 0x53, 0x68, 0xcf, 0xf3, 0xbc, 0x3f, 0x3b, 0x9a, 0xd2, 0x4e, 0x48, 0x85, 0xe3,
	0x39, 0x90, 0xa3, 0x83, 0x46, 0x35, 0x2a, 0x86, 0x38, 0x44, 0x5b, 0x15, 0x0d, 0x16, 0x9a, 0x1a,
	0xda, 0xd9, 0x41, 0x7b, 0xf8, 0x73, 0x07, 0xde, 0x29, 0x2e, 0xa8, 0x90, 0x85, 0x92, 0x2b, 0xd1,
	0xa0, 0x63, 0xb8, 0x2f, 0x69, 0xc7, 0xad, 0xa6, 0x8c, 0xa7, 0x60, 0x06, 0xe6, 0xfb, 0xe5, 0x7f,
	0x01, 0x3d, 0x80, 0xb7, 0x59, 0x48, 0x26, 0xa2, 0x4e, 0x77, 0x22, 0x1c, 0xc7, 0xf7, 0xeb, 0x1a,
	0x3d, 0x82, 0x13, 0xed, 0xab, 0x56, 0x30, 0x62, 0x34, 0x23, 0xde, 0xb4, 0xe9, 0xad, 0x98, 0x70,
	0x77, 0x50, 0x4b, 0xcd, 0xde, 0x99, 0x16, 0x9d, 0xc2, 0x71, 0xdf, 0x11, 0x77, 0xa9, 0x79, 0xba,
	0x3b, 0x03, 0xf3, 0xc9, 0xd3, 0x49, 0x1e, 0x3f, 0x91, 0xbf, 0x7f, 0x43, 0x96, 0x1f, 0xde, 0x9e,
	0x97, 0xa3, 0xbe, 0x5b, 0x5e, 0x6a, 0x8e, 0x5e, 0xc0, 0xc3, 0x56, 0xb1, 0x4f, 0xdc, 0x10, 0xa6,
	0xa4, 0x33, 0x94, 0x39, 0x42, 0xeb, 0xda, 0x70, 0x6b, 0xd3, 0xbd, 0xe8, 0x7b, 0x7f, 0xc0, 0xc5,
	0x96, 0x2e, 0x06, 0x88, 0x9e, 0x40, 0x54, 0x05, 0x12, 0xca, 0x56, 0xc2, 0x74, 0xd4, 0x09, 0x25,
	0xd3, 0xd1, 0x0c, 0xcc, 0x77, 0xcb, 0x69, 0x24, 0xc5, 0x0d, 0x80, 0x9e, 0xc3, 0xc3, 0x95, 0x97,
	0xb5, 0x0d, 0xe6, 0xbc, 0x26, 0xbc, 0xe7, 0xd2, 0x11, 0xa7, 0xb4, 0x60, 0xe9, 0x38, 0xb6, 0x39,
	0x88, 0x78, 0x11, 0xe8, 0x79, 0x80, 0xcb, 0xc0, 0x5e, 0x1e, 0x7f, 0xbb, 0x3a, 0x49, 0xfe, 0x5e,
	0x9d, 0x80, 0x2f, 0x7f, 0xbe, 0x3f, 0xbe, 0xe7, 0x39, 0x1e, 0xa6, 0x12, 0x7b, 0x36, 0xaf, 0x16,
	0x3f, 0xd6, 0x19, 0xb8, 0x5e, 0x67, 0xe0, 0xf7, 0x3a, 0x03, 0x5f, 0x37, 0x59, 0x72, 0xbd, 0xc9,
	0x92, 0x5f, 0x9b, 0x2c, 0xf9, 0x78, 0xda, 0x08, 0x77, 0xe1, 0xab, 0x9c, 0xa9, 0x0e, 0x1b, 0xd5,
	0xb6, 0xb1, 0xcc, 0x62, 0x1d, 0x6f, 0xfc, 0x19, 0x7b, 0x8e, 0xc3, 0x6c, 0x6c, 0x35, 0x8a, 0xdb,
	0x79, 0xf6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x37, 0x1d, 0x44, 0x7b, 0xf6, 0x01, 0x00, 0x00,
}

func (this *ChainConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainConfig)
	if !ok {
		that2, ok := that.(ChainConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Namespace != that1.Namespace {
		return false
	}
	if this.ChainId != that1.ChainId {
		return false
	}
	if this.PublicRpcUrl != that1.PublicRpcUrl {
		return false
	}
	if this.VmType != that1.VmType {
		return false
	}
	if this.LockerContractAddress != that1.LockerContractAddress {
		return false
	}
	if this.BlockConfirmation != that1.BlockConfirmation {
		return false
	}
	if this.FundsAddedEventTopic != that1.FundsAddedEventTopic {
		return false
	}
	return true
}
func (m *ChainConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FundsAddedEventTopic) > 0 {
		i -= len(m.FundsAddedEventTopic)
		copy(dAtA[i:], m.FundsAddedEventTopic)
		i = encodeVarintState(dAtA, i, uint64(len(m.FundsAddedEventTopic)))
		i--
		dAtA[i] = 0x3a
	}
	if m.BlockConfirmation != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.BlockConfirmation))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LockerContractAddress) > 0 {
		i -= len(m.LockerContractAddress)
		copy(dAtA[i:], m.LockerContractAddress)
		i = encodeVarintState(dAtA, i, uint64(len(m.LockerContractAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if m.VmType != 0 {
		i = encodeVarintState(dAtA, i, uint64(m.VmType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PublicRpcUrl) > 0 {
		i -= len(m.PublicRpcUrl)
		copy(dAtA[i:], m.PublicRpcUrl)
		i = encodeVarintState(dAtA, i, uint64(len(m.PublicRpcUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintState(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintState(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = len(m.PublicRpcUrl)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.VmType != 0 {
		n += 1 + sovState(uint64(m.VmType))
	}
	l = len(m.LockerContractAddress)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if m.BlockConfirmation != 0 {
		n += 1 + sovState(uint64(m.BlockConfirmation))
	}
	l = len(m.FundsAddedEventTopic)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicRpcUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicRpcUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmType", wireType)
			}
			m.VmType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmType |= VM_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockerContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockerContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockConfirmation", wireType)
			}
			m.BlockConfirmation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockConfirmation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundsAddedEventTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FundsAddedEventTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
